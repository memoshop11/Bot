import logging
import os
import asyncio
import csv
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
import aiosqlite

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('memo_bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip()]
if not ADMIN_IDS:
    raise ValueError("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã ADMIN_IDS –≤ .env —Ñ–∞–π–ª–µ")
DB_PATH = os.getenv("DB_PATH", "/data/memo_bot.db")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Fly.io

# –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
OFFER_URL = "https://telegra.ph/Publichnaya-oferta-07-25-7"
PRIVACY_URL = "https://telegra.ph/Politika-konfidencialnosti-07-19-25"
RULES_URL = "https://telegra.ph/Pravila-07-19-160"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "welcome": (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è PUBG Mobile - Metro Royale! üéÆ\n"
        "üíº –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 20% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞."
    ),
    "no_access": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
    "no_squads": "üè† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤.",
    "no_escorts": "üë§ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö.",
    "no_orders": "üìã –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "no_active_orders": "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
    "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
    "invalid_format": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "order_completed": "‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username} (Telegram ID: {telegram_id}, PUBG ID: {pubg_id})!",
    "order_already_completed": "‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.",
    "balance_added": "üí∏ –ë–∞–ª–∞–Ω—Å {amount} —Ä—É–±. –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
    "squad_full": "‚ö†Ô∏è –°–∫–≤–∞–¥ '{squad_name}' —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º—É–º 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
    "squad_too_small": "‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ '{squad_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞!",
    "order_added": "üìù –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω! –°—É–º–º–∞: {amount} —Ä—É–±., –û–ø–∏—Å–∞–Ω–∏–µ: {description}, –ö–ª–∏–µ–Ω—Ç: {customer}",
    "rules_not_accepted": "üìú –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, –æ—Ñ–µ—Ä—Ç—É –∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.",
    "user_banned": "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
    "user_restricted": "‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {date}.",
    "balance_zeroed": "üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω—É–ª–µ–Ω.",
    "pubg_id_updated": "üî¢ PUBG ID —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
    "ping": "üèì –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!",
    "order_taken": "üìù –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç —Å–∫–≤–∞–¥–æ–º {squad_name}!\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants}",
    "order_not_enough_members": "‚ö†Ô∏è –í —Å–∫–≤–∞–¥–µ '{squad_name}' –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2)!",
    "order_already_in_progress": "‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –≤ –Ω–∞–±–æ—Ä–µ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç!",
    "order_joined": "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–±–æ—Ä—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}!\n–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤:\n{participants}",
    "order_confirmed": "‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç!\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants}",
    "not_in_squad": "‚ö†Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ!",
    "max_participants": "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞!",
    "rating_submitted": "üåü –û—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –†–µ–ø—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
    "rate_order": "üåü –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ –∑–∞–∫–∞–∑ #{order_id} (1-5):",
    "payout_log": "üí∏ –í—ã–ø–ª–∞—Ç–∞: @{username} –ø–æ–ª—É—á–∏–ª {amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}. –î–∞—Ç–∞: {date}",
    "payout_request": "üì• –ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã –æ—Ç @{username} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}",
    "payout_receipt": "üßæ –Ø, @{username}, –ø–æ–ª—É—á–∏–ª –æ–ø–ª–∞—Ç—É {amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}.",
    "export_success": "üì§ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}!",
    "no_data_to_export": "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
    "reminder": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ."
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    squad_name = State()
    escort_info = State()
    remove_escort = State()
    zero_balance = State()
    pubg_id = State()
    balance_amount = State()
    complete_order = State()
    add_order = State()
    ban_duration = State()
    restrict_duration = State()
    rate_order = State()
    ban_permanent = State()
    profit_user = State()
    payout_request = State()

# --- –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.executescript('''
            CREATE TABLE IF NOT EXISTS squads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                rating REAL DEFAULT 0,
                rating_count INTEGER DEFAULT 0
            );
            CREATE TABLE IF NOT EXISTS escorts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                pubg_id TEXT,
                squad_id INTEGER,
                balance REAL DEFAULT 0,
                reputation INTEGER DEFAULT 0,
                completed_orders INTEGER DEFAULT 0,
                rating REAL DEFAULT 0,
                rating_count INTEGER DEFAULT 0,
                is_banned INTEGER DEFAULT 0,
                ban_until TIMESTAMP,
                restrict_until TIMESTAMP,
                rules_accepted INTEGER DEFAULT 0,
                FOREIGN KEY (squad_id) REFERENCES squads (id) ON DELETE SET NULL
            );
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                memo_order_id TEXT UNIQUE NOT NULL,
                customer_info TEXT NOT NULL,
                amount REAL NOT NULL,
                commission_amount REAL DEFAULT 0.0,
                status TEXT DEFAULT 'pending',
                squad_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                rating INTEGER DEFAULT 0,
                FOREIGN KEY (squad_id) REFERENCES squads (id) ON DELETE SET NULL
            );
            CREATE TABLE IF NOT EXISTS order_escorts (
                order_id INTEGER,
                escort_id INTEGER,
                pubg_id TEXT,
                PRIMARY KEY (order_id, escort_id),
                FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
                FOREIGN KEY (escort_id) REFERENCES escorts (id) ON DELETE CASCADE
            );
            CREATE TABLE IF NOT EXISTS order_applications (
                order_id INTEGER,
                escort_id INTEGER,
                squad_id INTEGER,
                pubg_id TEXT,
                PRIMARY KEY (order_id, escort_id),
                FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
                FOREIGN KEY (escort_id) REFERENCES escorts (id) ON DELETE CASCADE,
                FOREIGN KEY (squad_id) REFERENCES squads (id) ON DELETE SET NULL
            );
            CREATE TABLE IF NOT EXISTS payouts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                escort_id INTEGER,
                amount REAL,
                payout_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE SET NULL,
                FOREIGN KEY (escort_id) REFERENCES escorts (id) ON DELETE SET NULL
            );
            CREATE TABLE IF NOT EXISTS action_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                action_type TEXT,
                user_id INTEGER,
                order_id INTEGER,
                description TEXT,
                action_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            CREATE INDEX IF NOT EXISTS idx_escorts_telegram_id ON escorts (telegram_id);
            CREATE INDEX IF NOT EXISTS idx_orders_memo_order_id ON orders (memo_order_id);
            CREATE INDEX IF NOT EXISTS idx_order_escorts_order_id ON order_escorts (order_id);
            CREATE INDEX IF NOT EXISTS idx_order_applications_order_id ON order_applications (order_id);
            CREATE INDEX IF NOT EXISTS idx_payouts_order_id ON payouts (order_id);
            CREATE INDEX IF NOT EXISTS idx_action_log_action_date ON action_log (action_date);
        ''')
        await conn.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

async def log_action(action_type: str, user_id: int, order_id: int = None, description: str = None):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            "INSERT INTO action_log (action_type, user_id, order_id, description) VALUES (?, ?, ?, ?)",
            (action_type, user_id, order_id, description)
        )
        await conn.commit()
    logger.info(f"–õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è: {action_type}, user_id: {user_id}, order_id: {order_id}, description: {description}")

async def get_escort(telegram_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT id, squad_id, pubg_id, balance, reputation, completed_orders, username, "
            "rating, rating_count, is_banned, ban_until, restrict_until, rules_accepted "
            "FROM escorts WHERE telegram_id = ?", (telegram_id,)
        )
        return await cursor.fetchone()

async def add_escort(telegram_id: int, username: str):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO escorts (telegram_id, username, rules_accepted) VALUES (?, ?, 0)",
            (telegram_id, username)
        )
        await conn.commit()
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}")

async def get_squad_escorts(squad_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT telegram_id, username, pubg_id, rating FROM escorts WHERE squad_id = ?", (squad_id,)
        )
        return await cursor.fetchall()

async def get_squad_info(squad_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT s.name, COUNT(e.id) as member_count,
                   COALESCE(SUM(e.completed_orders), 0) as total_orders,
                   COALESCE(SUM(e.balance), 0) as total_balance,
                   s.rating, s.rating_count
            FROM squads s
            LEFT JOIN escorts e ON e.squad_id = s.id
            WHERE s.id = ?
            GROUP BY s.id
            ''', (squad_id,)
        )
        return await cursor.fetchone()

async def notify_squad(squad_id: int, message: str):
    escorts = await get_squad_escorts(squad_id)
    for telegram_id, _, _, _ in escorts:
        try:
            await bot.send_message(telegram_id, message)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id}: {e}")

async def notify_admins(message: str, reply_markup=None):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message, reply_markup=reply_markup)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

async def get_order_applications(order_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT e.telegram_id, e.username, e.pubg_id, e.squad_id, s.name
            FROM order_applications oa
            JOIN escorts e ON oa.escort_id = e.id
            LEFT JOIN squads s ON e.squad_id = s.id
            WHERE oa.order_id = ?
            ''', (order_id,)
        )
        return await cursor.fetchall()

async def get_order_info(memo_order_id: str):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT id, customer_info, amount, status, squad_id, commission_amount FROM orders WHERE memo_order_id = ?",
            (memo_order_id,)
        )
        return await cursor.fetchone()

async def update_escort_reputation(escort_id: int, rating: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            '''
            UPDATE escorts SET reputation = reputation + ?, rating = rating + ?, rating_count = rating_count + 1
            WHERE id = ?
            ''', (rating, rating, escort_id)
        )
        await conn.commit()

async def update_squad_reputation(squad_id: int, rating: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            '''
            UPDATE squads SET rating = rating + ?, rating_count = rating_count + 1
            WHERE id = ?
            ''', (rating, squad_id)
        )
        await conn.commit()

async def get_order_escorts(order_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT e.telegram_id, e.username, oe.pubg_id, e.squad_id, s.name
            FROM order_escorts oe
            JOIN escorts e ON oe.escort_id = e.id
            LEFT JOIN squads s ON e.squad_id = s.id
            WHERE oe.order_id = ?
            ''', (order_id,)
        )
        return await cursor.fetchall()

async def export_orders_to_csv():
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT o.memo_order_id, o.customer_info, o.amount, o.commission_amount, o.status, o.created_at, o.completed_at,
                   s.name as squad_name, p.amount as payout_amount, p.payout_date
            FROM orders o
            LEFT JOIN squads s ON o.squad_id = s.id
            LEFT JOIN payouts p ON o.id = p.order_id
            '''
        )
        orders = await cursor.fetchall()

    if not orders:
        return None

    filename = f"orders_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    with open(filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['Order ID', 'Customer', 'Amount', 'Commission', 'Status', 'Created At', 'Completed At', 'Squad', 'Payout Amount', 'Payout Date'])
        for order in orders:
            writer.writerow(order)

    return filename

async def check_pending_orders():
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            '''
            SELECT id, memo_order_id, squad_id
            FROM orders
            WHERE status = 'in_progress' AND created_at < ?
            ''', ((datetime.now() - timedelta(hours=12)).isoformat(),)
        )
        orders = await cursor.fetchall()

    for order_id, memo_order_id, squad_id in orders:
        await notify_squad(squad_id, MESSAGES["reminder"].format(order_id=memo_order_id))
        await log_action("reminder_sent", None, order_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{memo_order_id}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_menu_keyboard(user_id: int):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton(text="üåü –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ PUBG ID")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É")],
            [KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")] if is_admin(user_id) else [],
            [KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")],
            [KeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö"), KeyboardButton(text="üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"), KeyboardButton(text="‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è")],
            [KeyboardButton(text="‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å"), KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton(text="üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã")],
            [KeyboardButton(text="üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π"), KeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"), KeyboardButton(text="üìà –î–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton(text="üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"), KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_rules_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è")],
            [KeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞")],
            [KeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_order_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"join_order_{order_id}")]
    ])
    return keyboard

def get_confirmed_order_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"complete_order_{order_id}")]
    ])
    return keyboard

def get_rating_keyboard(order_id: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 ‚≠ê", callback_data=f"rate_{order_id}_1"),
            InlineKeyboardButton(text="2 ‚≠ê", callback_data=f"rate_{order_id}_2"),
            InlineKeyboardButton(text="3 ‚≠ê", callback_data=f"rate_{order_id}_3"),
            InlineKeyboardButton(text="4 ‚≠ê", callback_data=f"rate_{order_id}_4"),
            InlineKeyboardButton(text="5 ‚≠ê", callback_data=f"rate_{order_id}_5")
        ]
    ])
    return keyboard

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ---
async def check_access(message: types.Message, initial_start: bool = False):
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await add_escort(user_id, message.from_user.username or "Unknown")
            escort = await get_escort(user_id)
        if escort[9]:  # is_banned
            await message.answer(MESSAGES["user_banned"], reply_markup=ReplyKeyboardRemove())
            return False
        if escort[10] and datetime.fromisoformat(escort[10]) > datetime.now():  # ban_until
            await message.answer(MESSAGES["user_banned"], reply_markup=ReplyKeyboardRemove())
            return False
        if escort[11] and datetime.fromisoformat(escort[11]) > datetime.now():  # restrict_until
            await message.answer(MESSAGES["user_restricted"].format(date=escort[11]), reply_markup=ReplyKeyboardRemove())
            return False
        if not escort[12] and initial_start:  # rules_accepted
            await message.answer(MESSAGES["rules_not_accepted"], reply_markup=get_rules_keyboard())
            return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_access –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    try:
        if not await check_access(message, initial_start=True):
            return
        await message.answer(f"{MESSAGES['welcome']}\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())

@dp.message(Command("ping"))
async def cmd_ping(message: types.Message):
    try:
        await message.answer(MESSAGES["ping"], reply_markup=get_menu_keyboard(message.from_user.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_ping –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è")
async def accept_rules(message: types.Message):
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("UPDATE escorts SET rules_accepted = 1 WHERE telegram_id = ?", (user_id,))
            await conn.commit()
        await message.answer(f"‚úÖ –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è")
        await log_action("accept_rules", user_id, None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ accept_rules –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "üî¢ –í–≤–µ—Å—Ç–∏ PUBG ID")
async def enter_pubg_id(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    try:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à PUBG ID:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.pubg_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ enter_pubg_id –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(Form.pubg_id)
async def process_pubg_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    pubg_id = message.text.strip()
    if not pubg_id:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "UPDATE escorts SET pubg_id = ? WHERE telegram_id = ?",
                (pubg_id, user_id)
            )
            await conn.commit()
        await message.answer(MESSAGES["pubg_id_updated"], reply_markup=get_menu_keyboard(user_id))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–∏–ª PUBG ID: {pubg_id}")
        await log_action("update_pubg_id", user_id, None, f"–û–±–Ω–æ–≤–ª–µ–Ω PUBG ID: {pubg_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_pubg_id –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
    finally:
        await state.clear()

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_handler(message: types.Message):
    if not await check_access(message):
        return
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=PRIVACY_URL)],
            [InlineKeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞", url=RULES_URL)],
            [InlineKeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", url=OFFER_URL)],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")]
        ])
        response = (
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n"
            "üíº –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 20% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞."
        )
        await message.answer(response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ info_handler: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.callback_query(F.data == "about_project")
async def about_project(callback: types.CallbackQuery):
    try:
        response = (
            "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ:\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é –≤ Metro Royale. "
            "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è, –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∑—Ä–∞—á–Ω—ã."
        )
        await callback.message.answer(response, reply_markup=get_menu_keyboard(callback.from_user.id))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ about_project –¥–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(callback.from_user.id))
        await callback.answer()

@dp.message(F.text.in_(["üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "üìñ –ü—Ä–∞–≤–∏–ª–∞", "üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"]))
async def rules_links(message: types.Message):
    if not await check_access(message):
        return
    try:
        if message.text == "üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=PRIVACY_URL)]
            ])
            await message.answer("üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
        elif message.text == "üìñ –ü—Ä–∞–≤–∏–ª–∞":
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞", url=RULES_URL)]
            ])
            await message.answer("üìñ –ü—Ä–∞–≤–∏–ª–∞:", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", url=OFFER_URL)]
            ])
            await message.answer("üìú –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rules_links: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await add_escort(user_id, message.from_user.username or "Unknown")
            escort = await get_escort(user_id)
        escort_id, squad_id, pubg_id, balance, reputation, completed_orders, username, rating, rating_count, _, ban_until, restrict_until, _ = escort
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
            squad = await cursor.fetchone()
        avg_rating = rating / rating_count if rating_count > 0 else 0
        response = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üîπ Username: @{username or 'Unknown'}\n"
            f"üîπ PUBG ID: {pubg_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üè† –°–∫–≤–∞–¥: {squad[0] if squad else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
            f"‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
            f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
            f"üåü –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f} ‚≠ê ({rating_count} –æ—Ü–µ–Ω–æ–∫)\n"
        )
        await message.answer(response, reply_markup=get_menu_keyboard(user_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_profile –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(F.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def available_orders(message: types.Message):
    if not await check_access(message):
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, memo_order_id, customer_info, amount FROM orders WHERE status = 'pending'"
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer(MESSAGES["no_orders"], reply_markup=get_menu_keyboard(message.from_user.id))
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"#{order_id} - {customer}, {amount:.2f} —Ä—É–±.", callback_data=f"select_order_{db_id}")]
            for db_id, order_id, customer, amount in orders
        ])
        await message.answer("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ available_orders –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.memo_order_id, o.customer_info, o.amount, o.status
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE e.telegram_id = ?
                ''', (user_id,)
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer(MESSAGES["no_active_orders"], reply_markup=get_menu_keyboard(user_id))
            return
        response = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
        for order_id, customer, amount, status in orders:
            status_text = "–û–∂–∏–¥–∞–µ—Ç" if status == "pending" else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" if status == "in_progress" else "–ó–∞–≤–µ—Ä—à–µ–Ω"
            response += f"#{order_id} - {customer}, {amount:.2f} —Ä—É–±., –°—Ç–∞—Ç—É—Å: {status_text}\n"
        await message.answer(response, reply_markup=get_menu_keyboard(user_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_orders –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
async def complete_order(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.memo_order_id, o.id, o.squad_id, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE e.telegram_id = ? AND o.status = 'in_progress'
                ''', (user_id,)
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer(MESSAGES["no_active_orders"], reply_markup=get_menu_keyboard(user_id))
            return
        response = "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n"
        for order_id, _, _, amount in orders:
            response += f"#{order_id} - {amount:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.complete_order)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(Form.complete_order)
async def process_complete_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    order_id = message.text.strip()
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            await state.clear()
            return
        escort_id, _, pubg_id, _, _, _, username, _, _, _, _, _, _ = escort
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, status FROM orders WHERE memo_order_id = ?",
                (order_id,)
            )
            order = await cursor.fetchone()
            if not order or order[1] != "in_progress":
                await message.answer(MESSAGES["order_already_completed"].format(order_id=order_id), reply_markup=get_menu_keyboard(user_id))
                await state.clear()
                return
            order_db_id = order[0]
            await conn.execute(
                "UPDATE orders SET status = 'completed', completed_at = ? WHERE id = ?",
                (datetime.now().isoformat(), order_db_id)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["order_completed"].format(
                order_id=order_id,
                username=username or "Unknown",
                telegram_id=user_id,
                pubg_id=pubg_id or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            ),
            reply_markup=get_menu_keyboard(user_id)
        )
        await notify_admins(
            MESSAGES["order_completed"].format(
                order_id=order_id,
                username=username or "Unknown",
                telegram_id=user_id,
                pubg_id=pubg_id or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            )
        )
        await log_action("complete_order", user_id, order_db_id, f"–ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username}")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_complete_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

@dp.message(F.text == "üåü –û—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
async def rate_order_start(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.memo_order_id, o.id, o.squad_id, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE o.status = 'completed' AND o.rating = 0 AND e.telegram_id = ?
                ''', (user_id,)
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.", reply_markup=get_menu_keyboard(user_id))
            return
        response = "üåü –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:\n"
        for order_id, _, _, amount in orders:
            response += f"#{order_id} - {amount:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.rate_order)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rate_order_start –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(Form.rate_order)
async def process_rate_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    order_id = message.text.strip()
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.id, o.squad_id
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE o.memo_order_id = ? AND o.status = 'completed' AND o.rating = 0 AND e.telegram_id = ?
                ''', (order_id, user_id)
            )
            order = await cursor.fetchone()
            if not order:
                await message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
                await state.clear()
                return
            order_db_id, squad_id = order
        rating_keyboard = get_rating_keyboard(order_id)
        await message.answer(MESSAGES["rate_order"].format(order_id=order_id), reply_markup=rating_keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_rate_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

@dp.callback_query(F.data.startswith("rate_"))
async def rate_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        _, order_id, rating = callback.data.split("_")
        rating = int(rating)
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.id, o.squad_id
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE o.memo_order_id = ? AND o.status = 'completed' AND e.telegram_id = ?
                ''', (order_id, user_id)
            )
            order = await cursor.fetchone()
            if not order:
                await callback.message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            order_db_id, squad_id = order
            cursor = await conn.execute(
                "SELECT escort_id FROM order_escorts WHERE order_id = ?", (order_db_id,)
            )
            escorts = await cursor.fetchall()
            for (escort_id,) in escorts:
                await update_escort_reputation(escort_id, rating)
            await update_squad_reputation(squad_id, rating)
            await conn.execute(
                "UPDATE orders SET rating = ? WHERE id = ?", (rating, order_db_id)
            )
            await conn.commit()
        await callback.message.edit_text(MESSAGES["rating_submitted"].format(rating=rating, order_id=order_id), reply_markup=None)
        await notify_squad(squad_id, f"üåü –ó–∞–∫–∞–∑ #{order_id} –ø–æ–ª—É—á–∏–ª –æ—Ü–µ–Ω–∫—É {rating}!")
        await log_action("rate_order", user_id, order_db_id, f"–û—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rate_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.message(F.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É")
async def request_payout(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    user_id = message.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            return
        escort_id = escort[0]
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.memo_order_id, o.id, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE e.telegram_id = ? AND o.status = 'completed'
                AND NOT EXISTS (
                    SELECT 1 FROM payouts p WHERE p.order_id = o.id AND p.escort_id = e.id
                )
                ''', (user_id,)
            )
            orders = await cursor.fetchall()
        if not orders:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã.", reply_markup=get_menu_keyboard(user_id))
            return
        response = "üì• –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã:\n"
        for order_id, _, amount in orders:
            response += f"#{order_id} - {amount:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.payout_request)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ request_payout –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))

@dp.message(Form.payout_request)
async def process_payout_request(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    order_id = message.text.strip()
    try:
        escort = await get_escort(user_id)
        if not escort:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            await state.clear()
            return
        escort_id = escort[0]
        username = escort[6] or "Unknown"
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT o.id, o.amount
                FROM orders o
                JOIN order_escorts oe ON o.id = oe.order_id
                JOIN escorts e ON oe.escort_id = e.id
                WHERE o.memo_order_id = ? AND o.status = 'completed' AND e.telegram_id = ?
                ''',
                (order_id, user_id)
            )
            order = await cursor.fetchone()
            if not order:
                await message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
                await state.clear()
                return
            order_db_id, amount = order
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM payouts WHERE order_id = ? AND escort_id = ?",
                (order_db_id, escort_id)
            )
            if (await cursor.fetchone())[0] > 0:
                await message.answer("‚ö†Ô∏è –í—ã–ø–ª–∞—Ç–∞ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.", reply_markup=get_menu_keyboard(user_id))
                await state.clear()
                return
            commission = amount * 0.2
            payout_amount = amount - commission
            await conn.execute(
                "INSERT INTO payouts (order_id, escort_id, amount) VALUES (?, ?, ?)",
                (order_db_id, escort_id, payout_amount)
            )
            await conn.execute(
                "UPDATE escorts SET balance = balance + ? WHERE id = ?",
                (payout_amount, escort_id)
            )
            await conn.execute(
                "UPDATE orders SET commission_amount = ? WHERE id = ?",
                (commission, order_db_id)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["payout_receipt"].format(username=username, amount=payout_amount, order_id=order_id),
            reply_markup=get_menu_keyboard(user_id)
        )
        await notify_admins(
            MESSAGES["payout_request"].format(username=username, amount=payout_amount, order_id=order_id)
        )
        await log_action("payout_request", user_id, order_db_id, f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã {payout_amount:.2f} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_payout_request –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await state.clear()

@dp.callback_query(F.data.startswith("select_order_"))
async def select_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        await callback.message.edit_text("üìù –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.", reply_markup=get_order_keyboard(order_db_id))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("join_order_"))
async def join_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return
        if not escort[2]:
            await callback.message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à PUBG ID!", reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return
        if not escort[1]:
            await callback.message.answer(MESSAGES["not_in_squad"], reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return
        escort_id = escort[0]
        pubg_id = escort[2]
        squad_id = escort[1]
        order_db_id = int(callback.data.split("_")[-1])
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT status FROM orders WHERE id = ?", (order_db_id,))
            order = await cursor.fetchone()
            if not order or order[0] != "pending":
                await callback.message.answer(MESSAGES["order_already_in_progress"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_applications WHERE order_id = ? AND escort_id = ?",
                (order_db_id, escort_id)
            )
            if (await cursor.fetchone())[0] > 0:
                await callback.message.answer("‚úÖ –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É!", reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM order_applications WHERE order_id = ?", (order_db_id,)
            )
            participant_count = (await cursor.fetchone())[0]
            if participant_count >= 4:
                await callback.message.answer(MESSAGES["max_participants"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            await conn.execute(
                '''
                INSERT INTO order_applications (order_id, escort_id, squad_id, pubg_id)
                VALUES (?, ?, ?, ?)
                ''',
                (order_db_id, escort_id, squad_id, pubg_id)
            )
            await conn.commit()
        applications = await get_order_applications(order_db_id)
        participants = "\n".join(f"üë§ @{u or 'Unknown'} (PUBG ID: {p}, –°–∫–≤–∞–¥: {s or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'})" for _, u, p, _, s in applications)
        response = f"üìã –ó–∞–∫–∞–∑ #{order_db_id} –≤ –Ω–∞–±–æ—Ä–µ:\n"
        response += f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{participants if participants else '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è'}\n"
        response += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(applications)}/4"
        if len(applications) >= 2:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"start_order_{order_db_id}")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_{order_db_id}")]
            ])
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_order_{order_db_id}")]
            ])
        await callback.message.edit_text(response, reply_markup=keyboard)
        await callback.message.answer(
            MESSAGES["order_joined"].format(order_id=order_db_id, participants=participants),
            reply_markup=get_menu_keyboard(user_id)
        )
        await log_action("join_order", user_id, order_db_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∑–∞–∫–∞–∑—É #{order_db_id}")
        await callback.answer()
    except aiosqlite.IntegrityError:
        await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.", reply_markup=get_menu_keyboard(user_id))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ join_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("start_order_"))
async def start_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        escort = await get_escort(user_id)
        if not escort or not escort[1]:
            await callback.message.answer(MESSAGES["not_in_squad"], reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT memo_order_id, status, amount FROM orders WHERE id = ?", (order_db_id,)
            )
            order = await cursor.fetchone()
            if not order or order[1] != "pending":
                await callback.message.answer(MESSAGES["order_already_in_progress"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            cursor = await conn.execute(
                "SELECT escort_id, squad_id, pubg_id FROM order_applications WHERE order_id = ?", (order_db_id,)
            )
            applications = await cursor.fetchall()
            if len(applications) < 2 or len(applications) > 4:
                await callback.message.answer(
                    MESSAGES["order_not_enough_members"].format(squad_name=""),
                    reply_markup=get_menu_keyboard(user_id)
                )
                await callback.answer()
                return
            winning_squad_id = applications[0][1]
            valid_applications = [app for app in applications if app[1] == winning_squad_id]
            if len(valid_applications) < 2:
                await callback.message.answer(
                    MESSAGES["order_not_enough_members"].format(squad_name=""),
                    reply_markup=get_menu_keyboard(user_id)
                )
                await callback.answer()
                return
            for escort_id, _, pubg_id in valid_applications:
                await conn.execute(
                    '''
                    INSERT INTO order_escorts (order_id, escort_id, pubg_id)
                    VALUES (?, ?, ?)
                    ''',
                    (order_db_id, escort_id, pubg_id)
                )
                await conn.execute(
                    "UPDATE escorts SET completed_orders = completed_orders + 1 WHERE id = ?",
                    (escort_id,)
                )
            commission = order[2] * 0.2
            await conn.execute(
                '''
                UPDATE orders
                SET status = 'in_progress', squad_id = ?, commission_amount = ?
                WHERE id = ?
                ''',
                (winning_squad_id, commission, order_db_id)
            )
            await conn.execute("DELETE FROM order_applications WHERE order_id = ?", (order_db_id,))
            await conn.commit()
        order_id = order[0]
        participants = "\n".join(
            f"üë§ @{u or 'Unknown'} (PUBG ID: {p}, –°–∫–≤–∞–¥: {s or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'})"
            for _, u, p, _, s in await get_order_escorts(order_db_id)
        )
        response = MESSAGES["order_confirmed"].format(order_id=order_id, participants=participants)
        keyboard = get_confirmed_order_keyboard(order_id)
        await callback.message.edit_text(response, reply_markup=keyboard)
        for telegram_id, _, _, _, _ in await get_order_escorts(order_db_id):
            try:
                await bot.send_message(
                    telegram_id,
                    f"üìù –ó–∞–∫–∞–∑ #{order_id} –Ω–∞—á–∞—Ç! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é.",
                    reply_markup=get_menu_keyboard(telegram_id)
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {telegram_id} –æ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞: {e}")
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (winning_squad_id,))
            squad_name = (await cursor.fetchone())[0] or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        await notify_admins(
            MESSAGES["order_taken"].format(
                order_id=order_id,
                squad_name=squad_name,
                participants=participants
            )
        )
        await log_action("start_order", user_id, order_db_id, f"–ó–∞–∫–∞–∑ #{order_id} –Ω–∞—á–∞—Ç —Å–∫–≤–∞–¥–æ–º {squad_name}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("complete_order_"))
async def complete_order_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    order_id = callback.data.split("_")[2]
    try:
        escort = await get_escort(user_id)
        if not escort:
            await callback.message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(user_id))
            await callback.answer()
            return
        escort_id = escort[0]
        username = escort[6] or "Unknown"
        pubg_id = escort[2] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT id, status FROM orders WHERE memo_order_id = ?",
                (order_id,)
            )
            order = await cursor.fetchone()
            if not order or order[1] != "in_progress":
                await callback.message.answer(
                    MESSAGES["order_already_completed"].format(order_id=order_id),
                    reply_markup=get_menu_keyboard(user_id)
                )
                await callback.answer()
                return
            order_db_id = order[0]
            await conn.execute(
                '''
                UPDATE orders
                SET status = 'completed', completed_at = ?
                WHERE id = ?
                ''',
                (datetime.now().isoformat(), order_db_id)
            )
            await conn.commit()
        await callback.message.edit_text(
            MESSAGES["order_completed"].format(
                order_id=order_id,
                username=username,
                telegram_id=user_id,
                pubg_id=pubg_id
            ),
            reply_markup=None
        )
        await notify_admins(
            MESSAGES["order_completed"].format(
                order_id=order_id,
                username=username,
                telegram_id=user_id,
                pubg_id=pubg_id
            )
        )
        await log_action(
            "complete_order",
            user_id,
            order_db_id,
            f"–ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{username}"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_order_callback –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        order_db_id = int(callback.data.split("_")[-1])
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT status, memo_order_id FROM orders WHERE id = ?", (order_db_id,))
            order = await cursor.fetchone()
            if not order or order[0] != "pending":
                await callback.message.answer(MESSAGES["order_already_in_progress"], reply_markup=get_menu_keyboard(user_id))
                await callback.answer()
                return
            await conn.execute("DELETE FROM order_applications WHERE order_id = ?", (order_db_id,))
            await conn.commit()
        await callback.message.edit_text(f"üìù –ù–∞–±–æ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order[1]} –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=None)
        await log_action("cancel_order", user_id, order_db_id, f"–ù–∞–±–æ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order[1]} –æ—Ç–º–µ–Ω–µ–Ω")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_order –¥–ª—è {user_id}: {e}")
        await callback.message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(user_id))
        await callback.answer()

@dp.message(F.text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel –¥–ª—è {message.from_user.id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

@dp.message(F.text == "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥")
async def add_squad(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–≤–∞–¥–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.squad_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_squad: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.squad_name)
async def process_squad_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    squad_name = message.text.strip()
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute("INSERT INTO squads (name) VALUES (?)", (squad_name,))
            await conn.commit()
        await message.answer(f"üè† –°–∫–≤–∞–¥ '{squad_name}' –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_keyboard())
        await log_action("add_squad", user_id, None, f"–î–æ–±–∞–≤–ª–µ–Ω —Å–∫–≤–∞–¥ '{squad_name}'")
        await state.clear()
    except aiosqlite.IntegrityError:
        await message.answer("‚ö†Ô∏è –°–∫–≤–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_squad_name –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤")
async def list_squads(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id, name FROM squads")
            squads = await cursor.fetchall()
        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_admin_keyboard())
            return
        response = "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤:\n"
        for squad_id, name in squads:
            squad_info = await get_squad_info(squad_id)
            avg_rating = squad_info[4] / squad_info[5] if squad_info[5] > 0 else 0
            response += (
                f"\nüè† {name}\n"
                f"- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {squad_info[1]}\n"
                f"- –ó–∞–∫–∞–∑–æ–≤: {squad_info[2]}\n"
                f"- –ë–∞–ª–∞–Ω—Å: {squad_info[3]:.2f} —Ä—É–±.\n"
                f"- –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f} ‚≠ê ({squad_info[5]} –æ—Ü–µ–Ω–æ–∫)\n"
            )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_squads: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def add_escort(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id, name FROM squads")
            squads = await cursor.fetchall()
        if not squads:
            await message.answer(MESSAGES["no_squads"], reply_markup=get_admin_keyboard())
            return
        response = "üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–≤–∞–¥—ã:\n"
        for squad_id, name in squads:
            response += f"ID: {squad_id} - {name}\n"
        response += "\nüë§ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: Telegram ID, Squad ID\n–ü—Ä–∏–º–µ—Ä: 123456789, 1"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.escort_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_escort: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.escort_info)
async def process_escort(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id, squad_id = map(int, message.text.strip().split(","))
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT id FROM squads WHERE id = ?", (squad_id,))
            if not await cursor.fetchone():
                await message.answer("‚ö†Ô∏è –°–∫–≤–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?",
                (telegram_id,)
            )
            existing_user = await cursor.fetchone()
            username = (await bot.get_chat(telegram_id)).username or "Unknown"
            if existing_user:
                await conn.execute(
                    "UPDATE escorts SET squad_id = ?, username = ? WHERE telegram_id = ?",
                    (squad_id, username, telegram_id)
                )
            else:
                await conn.execute(
                    '''
                    INSERT INTO escorts (telegram_id, username, squad_id)
                    VALUES (?, ?, ?)
                    ''',
                    (telegram_id, username, squad_id)
                )
            await conn.commit()
        await message.answer(
            f"üë§ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥!", reply_markup=get_admin_keyboard()
        )
        await log_action(
            "add_escort",
            user_id,
            None,
            f"–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} (ID: {telegram_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ {squad_id}"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_escort –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
async def remove_escort(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë§ –°–ø–∏—Å–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or-weather_id}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.remove_escort)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_escort: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.remove_escort)
async def process_remove_escort(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id = int(message.text.strip())
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?",
                (telegram_id,)
            )
            user = await cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            username = user[0] or "Unknown"
            await conn.execute(
                "DELETE FROM escorts WHERE telegram_id = ?",
                (telegram_id,)
            )
            await conn.commit()
        await message.answer(
            f"üóëÔ∏è –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} —É–¥–∞–ª—ë–Ω!", reply_markup=get_admin_keyboard()
        )
        await log_action(
            "remove_escort",
            user_id,
            None,
            f"–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π @{username} (ID: {telegram_id}) —É–¥–∞–ª—ë–Ω"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_remove_escort –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö")
async def escort_balances(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT telegram_id, username, balance
                FROM escorts
                WHERE balance > 0
                ORDER BY balance DESC
                '''
            )
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º.", reply_markup=get_admin_keyboard())
            return
        response = "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö:\n"
        for telegram_id, username, balance in escorts:
            response += f"@{username or 'Unknown'} (ID: {telegram_id}): {balance:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ escort_balances: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å")
async def add_balance(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: Telegram ID, —Å—É–º–º–∞\n–ü—Ä–∏–º–µ—Ä: 123456789, 1000.50"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.balance_amount)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_balance: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.balance_amount)
async def process_balance_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id, amount = map(float, message.text.strip().split(","))
        telegram_id = int(telegram_id)
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,)
            )
            user = await cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            username = user[0] or "Unknown"
            await conn.execute(
                "UPDATE escorts SET balance = balance + ? WHERE telegram_id = ?",
                (amount, telegram_id)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["balance_added"].format(amount=amount, user_id=telegram_id),
            reply_markup=get_admin_keyboard()
        )
        await log_action(
            "add_balance",
            user_id,
            None,
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} (ID: {telegram_id})"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_balance_amount –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def add_order(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID –∑–∞–∫–∞–∑–∞, —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "–ü—Ä–∏–º–µ—Ä: ORDER123, 1000.50, –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ Metro Royale",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.add_order)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_order: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.add_order)
async def process_add_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        order_id, amount, description = message.text.strip().split(",", 2)
        amount = float(amount.strip())
        order_id = order_id.strip()
        description = description.strip()
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                '''
                INSERT INTO orders (memo_order_id, customer_info, amount)
                VALUES (?, ?, ?)
                ''',
                (order_id, description, amount)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["order_added"].format(
                order_id=order_id, amount=amount, description=description, customer=description
            ),
            reply_markup=get_admin_keyboard()
        )
        await notify_admins(
            MESSAGES["order_added"].format(
                order_id=order_id, amount=amount, description=description, customer=description
            )
        )
        await log_action(
            "add_order",
            user_id,
            None,
            f"–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ #{order_id}: {amount:.2f} —Ä—É–±., {description}"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except aiosqlite.IntegrityError:
        await message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_order –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
async def ban_permanent(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.ban_permanent)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ban_permanent: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.ban_permanent)
async def process_ban_permanent(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id = int(message.text.strip())
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,)
            )
            user = await cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            username = user[0] or "Unknown"
            await conn.execute(
                "UPDATE escorts SET is_banned = 1 WHERE telegram_id = ?", (telegram_id,)
            )
            await conn.commit()
        await message.answer(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!", reply_markup=get_admin_keyboard()
        )
        await log_action(
            "ban_permanent",
            user_id,
            None,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {telegram_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ban_permanent –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è")
async def ban_temporary(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789, 7):"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.ban_duration)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ban_temporary: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.ban_duration)
async def process_ban_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id, days = map(int, message.text.strip().split(","))
        ban_until = (datetime.now() + timedelta(days=days)).isoformat()
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,)
            )
            user = await cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            username = user[0] or "Unknown"
            await conn.execute(
                "UPDATE escorts SET ban_until = ? WHERE telegram_id = ?", (ban_until, telegram_id)
            )
            await conn.commit()
        await message.answer(
            f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until}!", reply_markup=get_admin_keyboard()
        )
        await log_action(
            "ban_temporary",
            user_id,
            None,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {telegram_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until}"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ban_duration –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å")
async def restrict_user(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789, 7):"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.restrict_duration)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restrict_user: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.restrict_duration)
async def process_restrict_duration(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id, days = map(int, message.text.strip().split(","))
        restrict_until = (datetime.now() + timedelta(days=days)).isoformat()
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,)
            )
            user = await cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            username = user[0] or "Unknown"
            await conn.execute(
                "UPDATE escorts SET restrict_until = ? WHERE telegram_id = ?", (restrict_until, telegram_id)
            )
            await conn.commit()
        await message.answer(
            f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {restrict_until}!", reply_markup=get_admin_keyboard()
        )
        await log_action(
            "restrict_user",
            user_id,
            None,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {telegram_id}) –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {restrict_until}"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_restrict_duration –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def zero_balance(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.zero_balance)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ zero_balance: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.zero_balance)
async def process_zero_balance(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id = int(message.text.strip())
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,)
            )
            user = await cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            username = user[0] or "Unknown"
            await conn.execute(
                "UPDATE escorts SET balance = 0 WHERE telegram_id = ?", (telegram_id,)
            )
            await conn.commit()
        await message.answer(
            MESSAGES["balance_zeroed"].format(user_id=telegram_id),
            reply_markup=get_admin_keyboard()
        )
        await log_action(
            "zero_balance",
            user_id,
            None,
            f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {telegram_id}) –æ–±–Ω—É–ª–µ–Ω"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_zero_balance –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_users(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT telegram_id, username, squad_id, pubg_id, balance, reputation,
                       completed_orders, rating, rating_count, is_banned, ban_until, restrict_until
                FROM escorts
                '''
            )
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for escort in escorts:
            telegram_id, username, squad_id, pubg_id, balance, reputation, completed_orders, rating, rating_count, is_banned, ban_until, restrict_until = escort
            avg_rating = rating / rating_count if rating_count > 0 else 0
            async with aiosqlite.connect(DB_PATH) as conn:
                cursor = await conn.execute("SELECT name FROM squads WHERE id = ?", (squad_id,))
                squad = await cursor.fetchone()
            status = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_banned else (
                f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {restrict_until}" if restrict_until and datetime.fromisoformat(restrict_until) > datetime.now()
                else "–ê–∫—Ç–∏–≤–µ–Ω"
            )
            response += (
                f"\nüë§ @{username or 'Unknown'} (ID: {telegram_id})\n"
                f"- –°–∫–≤–∞–¥: {squad[0] if squad else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
                f"- PUBG ID: {pubg_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"- –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n"
                f"- –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n"
                f"- –ó–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
                f"- –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f} ‚≠ê ({rating_count} –æ—Ü–µ–Ω–æ–∫)\n"
                f"- –°—Ç–∞—Ç—É—Å: {status}\n"
            )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_users: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã")
async def all_balances(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT telegram_id, username, balance
                FROM escorts
                ORDER BY balance DESC
                '''
            )
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=get_admin_keyboard())
            return
        response = "üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã:\n"
        for telegram_id, username, balance in escorts:
            response += f"@{username or 'Unknown'} (ID: {telegram_id}): {balance:.2f} —Ä—É–±.\n"
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ all_balances: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π")
async def action_log(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT action_type, user_id, order_id, description, action_date
                FROM action_log
                ORDER BY action_date DESC
                LIMIT 50
                '''
            )
            logs = await cursor.fetchall()
        if not logs:
            await message.answer("‚ö†Ô∏è –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
            return
        response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        for action_type, user_id, order_id, description, action_date in logs:
            response += (
                f"[{action_date}] {action_type} (User ID: {user_id}, Order ID: {order_id or 'N/A'})\n"
                f"- {description}\n\n"
            )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ action_log: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_data(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        filename = await export_orders_to_csv()
        if not filename:
            await message.answer(MESSAGES["no_data_to_export"], reply_markup=get_admin_keyboard())
            return
        with open(filename, 'rb') as f:
            await message.answer_document(types.FSInputFile(path=filename), caption=MESSAGES["export_success"].format(filename=filename))
        os.remove(filename)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await log_action("export_data", message.from_user.id, None, f"–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {filename}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_data: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")
async def monthly_report(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        start_date = (datetime.now() - timedelta(days=30)).isoformat()
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                '''
                SELECT COALESCE(SUM(commission_amount), 0) as total_commission
                FROM orders
                WHERE completed_at >= ?
                ''', (start_date,)
            )
            total_commission = (await cursor.fetchone())[0]
        response = (
            f"üìä –û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n"
            f"üí∞ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {total_commission:.2f} —Ä—É–±.\n"
        )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ monthly_report: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìà –î–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def user_profit(message: types.Message, state: FSMContext):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute("SELECT telegram_id, username FROM escorts")
            escorts = await cursor.fetchall()
        if not escorts:
            await message.answer(MESSAGES["no_escorts"], reply_markup=get_admin_keyboard())
            return
        response = "üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID - username):\n"
        for telegram_id, username in escorts:
            response += f"{telegram_id} - @{username or 'Unknown'}\n"
        response += "\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Ö–æ–¥–∞:"
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.profit_user)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_profit: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(Form.profit_user)
async def process_user_profit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        telegram_id = int(message.text.strip())
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT username FROM escorts WHERE telegram_id = ?", (telegram_id,)
            )
            user = await cursor.fetchone()
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
                await state.clear()
                return
            username = user[0] or "Unknown"
            cursor = await conn.execute(
                '''
                SELECT COALESCE(SUM(p.amount), 0) as total_payout
                FROM payouts p
                JOIN escorts e ON p.escort_id = e.id
                WHERE e.telegram_id = ?
                ''', (telegram_id,)
            )
            total_payout = (await cursor.fetchone())[0]
        response = (
            f"üìà –î–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {telegram_id}):\n"
            f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_payout:.2f} —Ä—É–±.\n"
        )
        await message.answer(response, reply_markup=get_admin_keyboard())
        await log_action(
            "view_user_profit",
            user_id,
            None,
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –¥–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {telegram_id})"
        )
        await state.clear()
    except ValueError:
        await message.answer(MESSAGES["invalid_format"], reply_markup=get_admin_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_user_profit –¥–ª—è {user_id}: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥")
async def admin_help(message: types.Message):
    if not await check_access(message):
        return
    if not is_admin(message.from_user.id):
        await message.answer(MESSAGES["no_access"], reply_markup=get_menu_keyboard(message.from_user.id))
        return
    try:
        response = (
            "üìñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥:\n"
            "üè† –î–æ–±–∞–≤–∏—Ç—å —Å–∫–≤–∞–¥ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫–≤–∞–¥\n"
            "üìã –°–ø–∏—Å–æ–∫ —Å–∫–≤–∞–¥–æ–≤ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∫–≤–∞–¥—ã\n"
            "üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–≤–∞–¥\n"
            "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üí∞ –ë–∞–ª–∞–Ω—Å—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏—Ö - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º\n"
            "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å - –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            "üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            "‚è∞ –ë–∞–Ω –Ω–∞ –≤—Ä–µ–º—è - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚õî –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è–º\n"
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üí∞ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å - –°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "üìä –í—Å–µ –±–∞–ª–∞–Ω—Å—ã - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "üìú –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –≤ CSV\n"
            "üìä –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
            "üìà –î–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Ö–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        )
        await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_help: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_admin_keyboard())

@dp.message(F.text == "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main(message: types.Message):
    if not await check_access(message):
        return
    try:
        await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_menu_keyboard(message.from_user.id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_main: {e}")
        await message.answer(MESSAGES["error"], reply_markup=get_menu_keyboard(message.from_user.id))

async def on_startup():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_dir = os.path.dirname(DB_PATH)
    if db_dir and not os.path.exists(db_dir):
        os.makedirs(db_dir)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_dir}")
    
    await init_db()
    scheduler.add_job(check_pending_orders, "interval", hours=1)
    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def main():
    try:
        await on_startup()
        await dp.start_polling(bot, polling_timeout=30)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Fly.io
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())